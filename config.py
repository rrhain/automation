#----------------------------------------------------------------------
# Copyright (c) 2013 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

# This file contains a set of parameters 
# To be accessed as "config.X" for a parameter X
# The values in this file are defaults: they are
# to be overriden by changing the /etc/gram/config.json file
#
# Do not edit this file for configuring a specific GRAM installation

# Note: Variables with None initial values have no default and MUST be set
# in the configuration file

import logging
import sys
import json
import time
import os

#    --n The number of nodes in the network [optional, default=$size]
#    --r Range [optional, default=$range]
#    --i Interference Model, [optional default=$interferenceModel]
#    --s Scenario [optional, default=$scenario]
#    --m Mobility [optional, default=$mobility]
#    --l Link estimation period in microseconds [optional, default=$linkEstimationPeriod]
#    --d The number of seconds to run simulation [optional, default=$simulationTime]
#    --c Config file [optional, default=$configFile]
#    --t Tag [optional default=$tag]
#    --p Pattern [optional default=$pattern]
#    --y Density [optional default=$density]
#    --v SpeedMin [optional default=$speedMin]
#    --x SpeedMax [optional default=$speedMax]
#    --z config file directory [optional (overrides -c option) default=$configDir ]
#    --a NetAnim [optional default=$netAnim]
#    --f Mobility trace file path [optional default=$traceFile]
#    --w Waveform 1 [optional default=$wf1]
#    --u Waveform 2 [optional default=$wf2]
#    --q SimpleWireless contention range [optional default=$simpleWirelessContentionRange]
#    --e SimpleWireless error rate [optional default=$simpleWirelessErrorRate]
#    --b SimpleWireless data rate [optional default=$simpleWirelessDataRate]
#    --o 802.11 capacity [optional default=$capacity80211]
#    --g Random Num Gen Seed [optional default=$rngSeed]
#    --b Random Num Gen Run  [optional default=$rngRun]

#generic setup directories
logger = logging.getLogger('share-sim-runner')

srcRoot = "/home/rrhain/SHARE/Software/Tuscarora/Src/Patterns/Share"

simulationsRoot = "/tmp/sims"

#sandbox directory
sandbox = srcRoot + "/Sandbox"

#place to put simulation runs
simDir = simulationsRoot + "/t-sims"

#place to put simulation runs and scripts
scriptDir = simulationsRoot + "/analysis"

#simulation executable you want to run 
simExecutable = sandbox + "/runsims.sh"

#executable to run in each directory for result
dirResultsExecutable = simulationsRoot + "/share-analysis.sh"

#executable to run to aggregate results for all directories
allResultsExecutable = simulationsRoot + "/doGenPlot.pl"

now=time.strftime("%m%d%Y_%H%M%S")

#uncomment and use date if too lazy to come up with a name
outputDir = simulationsRoot + "/simRun_" + now

#uncomment and use date if too lazy to come up with a name
simInfoFile = outputDir + "/siminfo"

#template pctl file to base the simulation run on
shellTemplate = "./runSimFullPath.sh"

#opnet ef template file to base the simulation run on
confTemplate = "./share_char_perf.cfg"

#this wants to be the root directory of the sims I think - so sandbox
fullpath=os.getcwd()

doSetup = False

sysVars=None
trafficVars=None
plotVars=None
plotInHdr=None
plotOutHdr=None

# Traffic
config_file="./configs/c2e-scenario-cgroup7-dutycycle10-150s.cfg"

#random numbers 
rngSeed=[1]
rngRun=[1]

# Simulation and traffic duration
duration=150
traffic_start=30
traffic_end=duration - 30
traffic_duration=traffic_end - traffic_start

# Save NetAnim file
anim=1

# Scenario parameters
#want an array of numbers
num_nodes=[1, 2, 3]
mobility=["TracefileMobilityModel"]
#want an array of strings
trace_file=[""]

range=463000 # 250 * M_IN_NAUTICAL_MILE = 250 * 1852
link_estimation_period=[1000000]    

#num_waveform1=$num_nodes
num_waveform1=num_nodes[0]
num_waveform2=0

# Use simple-wireless
simple_wireless_data_rate=1000000000
simple_wireless_error_rate=0.0
simple_wireless_contention_range=0

# Use 802.11
scenario="share-test-sw"
capacity_80211="DsssRate11Mbps"

# Output files
pattern="ShareProtocol"
tag="sim"
plot_file_prefix="output/plot_" + now + "_" + pattern + "_" + mobility[0]
analysis_file="output/analysis_"+ now + "_" + pattern + "_" + mobility[0] + ".txt"
trace_dir="output/results_sim_" + now
pcap_file=trace_dir + "/trace-all-" + tag + ".pcap"

#just using for examples - should delete when working
#location=None
#shared_vlan_info=None

numToGenForVariables=1
numToGenForTraffic=1


# Read in configuration file
# For each key in JSON dictionary read
# Try to set the associated value in config module
# if it can be coerced into the object of current type
def initialize(config_file):
    print "config.initialize: " + config_file

    data = None
    try:
        f = open(config_file, 'r')
        data = f.read()
        f.close()
    except Exception, e:
        print "Failed to read SIM config file: " + config_file + str(e)
        logger.info("Failed to read SIM config file: " + config_file)
        return

    config_module = sys.modules[__name__]
    data_json = json.loads(data)

    for var in data_json.keys():
        if var[:2] == "__": continue # Comment in the JSON file
#        print var + " " + str(data_json[var])
        if not hasattr(config_module, var):
            logger.info("No variable named " + var + " in module config")
        else:
            current_type = type(getattr(config_module, var)).__name__
            new_value = data_json[var]
            new_type = type(new_value).__name__
            can_coerce = True

#            print "CT = " + current_type + " NT = " + new_type + " NV = " + str(new_value)

            try :
                if current_type == "NoneType":
                    pass
                elif current_type == new_type:
                    pass
                elif current_type == 'int':
                    new_value = int(new_value)
                elif current_type == 'long':
                    new_value = long(new_value)
                elif current_type == 'str':
                    new_value = str(new_value)
                elif current_type == 'float':
                    new_value = float(new_value)
                elif current_type == 'bool':
                    new_value = new_value not in ['False', 'false', 'f', '0']
                else:
                    logger.info("Can't coerce type " + current_type + " to " + 
                                new_type)
                    can_coerce = False
            except Exception, e:
                logger.info("Error coercing value : " + str(new_value) + \
                                "to " + current_type)
                can_coerce = False

            if can_coerce:
#                print "Setting " + var + " " + str(new_value)
                setattr(config_module, var, new_value)

#    print "Regina"
#    print data_json.keys()
    unset_required = []
    for param in dir(config_module):
        if param.startswith("__"): continue
        value = getattr(config_module, param)
        if value == None:
            unset_required.append(param)

    if len(unset_required) > 0:
        print "The following config parameters have no defaults and must be set:"
        for param in unset_required: print "   " + param
        sys.exit(0)


